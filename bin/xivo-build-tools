#!/bin/bash
set -e

if [ $EUID == 0 ]; then
    echo "This script must not be run as root" 1>&2
    exit 1
fi

DPUT_DIR="/tmp/dput"
CONF_FILE="${CONF_FILE:-"/etc/xivo-build-tools/config"}"
GPG_KEY="C55F4D4109AB2F7014DB4351DD31413E84202FDB"

# source conffile
if [ -e $CONF_FILE ]; then
    . $CONF_FILE
else
    echo "$CONF_FILE: no such file" >&2
    exit 1
fi

export NAME="$DEBFULLNAME"
export EMAIL="$DEBEMAIL"

usage() {
    cat << EOF
You have to provide some informations to allow building:

    Usage: $(basename $0) [OPTION]

    Options:
        -d <distribution>: Distribution where to upload package (default: $DISTRIBUTION_DEFAULT)
        -b <branch_name>: Git branch to build from (default: $GIT_BRANCH_DEFAULT)
        -m <mirror>: Mirror where to upload package (default: $MIRROR_DEFAULT)
        -a: Build all packages
        -s: Build only source packages
        -S: Build all binary packages from sources
        -c: Build arch-dependent binary packages from sources
        -C: Build arch-independent binary packages from sources
        -p <package>: Build only <package>
        -f: Force package build without checking for changes in repository
        -V: Set absolute package version
        -h: show this help

EOF
    exit 0
}

valid_package() {
    local package="$1"

    if [[ $PACKAGES =~ $package ]]; then
        return 0
    else
        echo "Package: $package does not exist, see $CONF_FILE for more informations" >&2
        exit -1
    fi
}

cd_to_git_dir_package() {
    local package="$1"

    local package_dir="${PACKAGES_DIR}/${package}"
    cd "${package_dir}"
    return 0
}

git_remote_branch_exist() {
    local remote_branch="$1"

    git branch -r | grep -q "origin/$remote_branch"
    return $?
}

git_init_local_branch() {
    local local_branch="$1"

    git show-ref --verify --quiet "refs/heads/$local_branch"
    return $?
}

generate_changelog() {
    local package="$1"
    local version="$2"

    echo "Generating changelog for package $package"

    cd_to_git_dir_package $package

    local message="$(git log -1 HEAD --pretty=format:%s)"
    dch -b -v $version --distribution $distribution --force-distribution "$message"

    return 0
}

install_build_depends() {
    local package="$1"
    sudo DEBIAN_FRONTEND=noninteractive apt-get build-dep -y --only-source "${package}=${package_version}"
    return 0
}


build_package_from_source() {
    local package="$1"

    local build_dir="$build_package_from_source_directory/$package"

    if [ -d $build_dir ]
    then
        rm -rf $build_dir
    fi

    mkdir -p $build_dir
    cd $build_dir

    sudo apt-get update -yq
    install_build_depends $package
    apt-get source --only-source "${package}=${package_version}"

    local directory_source=$(find  -maxdepth 1 -type d | grep ./)
    cd $directory_source
    case "$build_package_from_source" in
        arch-dependent) build_options="-B";;
        arch-independent) build_options="-A";;
        *) build_options="-b";;
    esac
    debuild --no-tgz-check --no-lintian --preserve-envvar=MAKEFLAGS --preserve-envvar=PATH $build_options -k$GPG_KEY
    cd $build_dir
    return 0
}

install_source_build_depends() {
    sudo apt-get update
    mk-build-deps --install --remove --tool 'apt-get --no-install-recommends --assume-yes' --root-cmd sudo
}

build_source_package() {
    local package="$1"
    local options="-d -k$GPG_KEY"

    cd_to_git_dir_package $package
    install_source_build_depends
    if debian/rules get-orig-source 2> /dev/null
    then
        echo "We have a get-orig-source"
        options="-sa "$options
        tar xvf ../*.tar* --strip 1 --exclude 'debian/*'
    fi

    debuild --no-tgz-check -S $options
    return 0
}

build_module_kernel() {
    local arch=$1
    local package_source=dahdi-source
    local dist=$(lsb_release -cs)

    sudo apt-get update -yq
    sudo apt-get purge -y ${package_source}
    sudo apt-get install -y module-assistant kmod ${package_source}

    case ${dist}-${arch} in
        #stretch-i386) local kernels="4.9.0-5-686 4.9.0-5-686-pae 4.9.0-6-686 4.9.0-6-686-pae 4.9.0-7-686 4.9.0-7-686-pae 4.9.0-8-686 4.9.0-8-686-pae 4.9.0-9-686 4.9.0-9-686-pae 4.9.0-11-686 4.9.0-11-686-pae 4.9.0-12-686 4.9.0-12-686-pae 4.9.0-13-686 4.9.0-13-686-pae 4.9.0-14-686 4.9.0-14-686-pae 4.9.0-15-686 4.9.0-15-686-pae 4.9.0-16-686 4.9.0-16-686-pae 4.9.0-17-686 4.9.0-17-686-pae 4.9.0-18-686 4.9.0-18-686-pae";;
        #stretch-amd64) local kernels="4.9.0-5-amd64 4.9.0-6-amd64 4.9.0-7-amd64 4.9.0-8-amd64 4.9.0-9-amd64 4.9.0-11-amd64 4.9.0-12-amd64 4.9.0-13-amd64 4.9.0-14-amd64 4.9.0-15-amd64 4.9.0-16-amd64 4.9.0-17-amd64 4.9.0-18-amd64";;
        stretch-i386) local kernels="4.9.0-19-686 4.9.0-19-686-pae";;
        stretch-amd64) local kernels="4.9.0-19-amd64";;
        #buster-i386) local kernels="4.19.0-5-686 4.19.0-5-686-pae 4.19.0-6-686 4.19.0-6-686-pae 4.19.0-8-686 4.19.0-8-686-pae 4.19.0-9-686 4.19.0-9-686-pae 4.19.0-10-686 4.19.0-10-686-pae 4.19.0-11-686 4.19.0-11-686-pae 4.19.0-12-686 4.19.0-12-686-pae 4.19.0-13-686 4.19.0-13-686-pae 4.19.0-14-686 4.19.0-14-686-pae 4.19.0-16-686 4.19.0-16-686-pae 4.19.0-17-686 4.19.0-17-686-pae 4.19.0-18-686 4.19.0-18-686-pae 4.19.0-19-686 4.19.0-19-686-pae 4.19.0-20-686 4.19.0-20-686-pae 4.19.0-21-686 4.19.0-21-686-pae 4.19.0-22-686 4.19.0-22-686-pae";;
        #buster-amd64) local kernels="4.19.0-5-amd64 4.19.0-6-amd64 4.19.0-8-amd64 4.19.0-9-amd64 4.19.0-10-amd64 4.19.0-11-amd64 4.19.0-12-amd64 4.19.0-13-amd64 4.19.0-14-amd64 4.19.0-16-amd64 4.19.0-17-amd64 4.19.0-18-amd64 4.19.0-19-amd64 4.19.0-20-amd64 4.19.0-21-amd64 4.19.0-22-amd64";;
        buster-i386) local kernels="4.19.0-23-686 4.19.0-23-686-pae";;
        buster-amd64) local kernels="4.19.0-23-amd64";;
        *) echo "ERROR: unknown arch '$arch'"; exit 1;;
    esac


    for KVERS in $kernels ; do
        local package_module=dahdi-linux
        local package_build=${package_module}-module
        local build_package_dahdi_module_directory=${build_package_from_source_directory}/${package_build}

        if [ -d ${build_package_dahdi_module_directory} ]; then
            rm -rf ${build_package_dahdi_module_directory}
        fi
        mkdir -p ${build_package_dahdi_module_directory}
        cd ${build_package_dahdi_module_directory}

        m-a prepare -i -t -l ${KVERS} -u ${build_package_dahdi_module_directory} ${package_module}
        SIGNCHANGES=1 m-a auto-build -i -t -l ${KVERS} -u ${build_package_dahdi_module_directory} ${package_module}

        debsign "-k${GPG_KEY}" *.changes
        upload_to_mirror ${package_build}
    done
}

clean_package() {
    local package="$1"

    cd_to_git_dir_package $package

    dh_clean
    return 0
}

build_dput_conf() {
    local dput_file="$1"

    cp ${DPUT_TPL_FILE} $dput_file
    sed -i "s|{{ distribution }}|${distribution}|g" $dput_file
    sed -i "s|{{ fqdn }}|${MIRROR_HOST}|g" $dput_file
    sed -i "s|{{ incoming }}|${MIRROR_INCOMING}|g" $dput_file
    sed -i "s|{{ login }}|${MIRROR_LOGIN}|g" $dput_file
    return 0
}

upload_to_mirror() {
    if [ -z $1 ]; then
        local package=$(dpkg-parsechangelog | grep Source | awk -F ': ' '{print $NF}')
    else
        local package=$1
    fi

    if [ $build_only_source -eq 0 ]; then
        local changes_file=$(ls *.changes)
    else
        local version=$(echo "$2" | awk -F ':' '{print $NF}')
        local changes_file="../${package}_${version}_source.changes"
    fi

    local dput_file="${DPUT_DIR}/${package}.cf"

    if [ ! -d "$DPUT_DIR" ];then
        mkdir $DPUT_DIR
    fi

    build_dput_conf $dput_file
    dput -c $dput_file $distribution $changes_file
    return 0
}

process_packages() {
    for package in $PACKAGES; do
        process_package $package
    done
}

package_is_up_to_date() {
    local package="$1"

    echo "Checking updated package: $package"

    valid_package $package

    cd_to_git_dir_package $package

    git fetch origin
    local need_update="$(git log $branch_name_builded..origin/$branch_name_builded --oneline)"

    if [ "$need_update" == "" ]; then
        echo "Package $package already up-to-date."
        return 0
    else
        echo "Package $package needs update."
        return 1
    fi
}

extract_branch_infos() {
    local package="$1"

    echo "Extracting branch infos for package: $package"

    branch_name_builded="$branch_name"

    cd_to_git_dir_package $package

    if ! git_remote_branch_exist $branch_name ; then
        echo "Remote branch $branch_name does not exist" >&2
        return 1
    fi

    git_init_local_branch $branch_name_builded
    echo "$package fetch branch: <${branch_name_builded}>"

    return 0
}

prepare_repository() {
    local package="$1"

    echo "Initializing package: $package"

    cd $PACKAGES_DIR
    if [ ! -d "${package}/.git" ]; then
        echo "Cloning repository..."
        git clone ${GIT_URL}/${package}.git
        force_rebuild=1
    fi
    cd $package
    git fetch
    git clean -fxd
    git reset --hard
    return 0
}

update_git_repo() {
    git reset --hard
    git checkout $branch_name_builded
    git pull
}

process_package() {
    local package="$1"

    echo "Processing $package"

    prepare_repository $package

    if ! extract_branch_infos $package; then
        return 1
    fi

    if package_is_up_to_date $package && [ $force_rebuild -eq 0 ]; then
        echo
        return 0
    fi

    update_git_repo

    generate_changelog $package $package_version

    if [ "$build_package_from_source" == "no" ]
    then
        build_source_package $package
        clean_package $package
    else
        build_package_from_source $package
    fi
    [ $? == 0 ] && upload_to_mirror $package $package_version
    return 0
}

validate_repo_name() {
    local var="$1"
    case "$var" in
     *\ * )
        echo "ERROR: Invalid repository name, space is not allowed" >&2
        exit 1
        ;;
    *_* )
        echo "ERROR: Invalid repository name, underscore is not allowed" >&2
        exit 1
        ;;
    *)
        return 0
        ;;
    esac
}

if [ -z "$1" ]; then
    usage
fi

while getopts :d:p:v:b:m:V:k:afhsScC opt
do
    case $opt in
        d) distribution=$OPTARG;;
        p) force_package=$OPTARG;;
        b) branch_name=$OPTARG;;
        s) build_only_source=1;;
        S) build_package_from_source='all';;
        m) conf_mirror=$OPTARG;;
        V) force_package_version=$OPTARG;;
        k) kernel_module_arch=$OPTARG;;
        a) all=1;;
        f) force_rebuild=1;;
        c) build_package_from_source='arch-dependent';;
        C) build_package_from_source='arch-independent';;
        h) usage;;
        '?') echo "$0 : option $OPTARG is not valid" >&2
            usage
        ;;
    esac
done

distribution="${distribution:-"${DISTRIBUTION_DEFAULT}"}"
branch_name="${branch_name:-"${GIT_BRANCH_DEFAULT}"}"
conf_mirror="${conf_mirror:-"${MIRROR_DEFAULT}"}"
package_version="${force_package_version:-""}"
all="${all:-"0"}"
build_only_source="${build_only_source:-"0"}"
build_package_from_source="${build_package_from_source:-"no"}"
build_module_kernel="${build_module_kernel:-"0"}"
force_rebuild="${force_rebuild:-"0"}"


validate_repo_name $distribution
config_mirror_file="${MIRROR_DIR}/$conf_mirror"
build_package_from_source_directory="${HOME}/build_from_sources"

if [ ! -f "$config_mirror_file" ]; then
    echo "ERROR: $config_mirror_file: No such mirror definition file" >&2
    exit 1
fi

# source mirror configuration
. $config_mirror_file

if [ -n "$kernel_module_arch" ]; then
    build_module_kernel $kernel_module_arch
    exit 0
fi

if [ $all -eq 1 ]; then
    process_packages
elif [ -n "$force_package" ]; then
    process_package $force_package
fi
